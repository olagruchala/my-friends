{"version":3,"sources":["ModalUserName.js","Header.js","DataService.js","LikePanel.js","CommentAdded.js","CommentPanel.js","StatusAdded.js","StatusCreate.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["ModalUserName","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isFormValid","showModal","isLoggedIn","JSON","parse","localStorage","getItem","user","name","email","handleCancel","bind","assertThisInitialized","handleSubmit","handleShow","dataService","setNewData","setState","event","_this2","form","currentTarget","nameText","formName","emailText","formEmail","checkValidity","console","log","preventDefault","stopPropagation","value","setItem","stringify","_this3","ReactDOM","findDOMNode","focus","_this4","_this$state","react_default","a","createElement","Fragment","Button","variant","onClick","Modal","show","onHide","Header","closeButton","Title","Body","Form","noValidate","validated","onSubmit","e","Group","controlId","Control","required","type","placeholder","ref","React","Component","className","src","logo","alt","height","src_ModalUserName","DataService","observers","newData","forEach","observer","observerCallback","push","UserDataService","CommentDataObserver","LikePanel","onUserNameDefined","likes","getStorageName","likesCounter","likesArr","currentUserLike","addObserver","likeHandler","id","storageCallback","userEmail","includes","emailIndex","findIndex","element","splice","prevState","assign","length","likeButton","OverlayTrigger","overlay","Tooltip","disabled","style","pointerEvents","react_fontawesome_index_es","icon","faThumbsUp","CommentAdded","editing","textareaValue","textValue","commentsArr","renderNormal","renderTxtArea","editComment","applyComment","textareaHandle","target","commentIndex","map","comment","indexOf","newText","keyCode","shiftKey","newCommentsObj","commentObserver","rows","onKeyDown","onChange","dots","edit","_this$props","faEllipsisH","CommentPanel","onCommentEdition","displayComments","addNewComment","userData","trim","concat","toConsumableArray","commentsCounter","faAngleIcon","faAngleDoubleUp","faAngleDoubleDown","cols","src_CommentAdded","key","Container","Row","Col","src_LikePanel","faCommentDots","StatusAdded","txtValue","statusArr","editStatus","applyStatus","statusIndex","status","newStatusObj","login","date","color","faUser","faUserSecret","dist_default","fromNow","src_CommentPanel","STORAGE_NAME","StatusCreate","chooseColor","colorArr","Math","floor","random","sendStatus","statusData","Date","letters","maxLetters","maxLength","src_StatusAdded","App","src_Header","src_StatusCreate","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bf09dc0e.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Button, Modal, Form} from \"react-bootstrap\";\n\nclass ModalUserName extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFormValid: false,\n            showModal: false,\n            isLoggedIn: JSON.parse(localStorage.getItem(\"isLoggedIn\")) || false,\n\n            user: JSON.parse(localStorage.getItem(\"user\")) || {\n                name: \"unknown\",\n                email: \"unknown\"\n            }\n            // todo: isLoggedIn: (this.state.user.name !== \"unknown\")\n        };\n\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n\n    }\n\n    componentDidMount() {\n        if (this.state.user.name !== \"unknown\") {\n            this.props.dataService.setNewData(this.state.user); //set user\n        }\n    }\n\n    handleCancel() {\n        this.setState({\n            showModal: false\n        });\n    }\n\n    handleSubmit(event) {\n        const form = event.currentTarget;\n        const nameText = this.formName;\n        const emailText = this.formEmail;\n\n        if (form.checkValidity() === false) {\n            console.log(\"invalid form\");\n            event.preventDefault();\n            event.stopPropagation();\n            this.setState({\n                isFormValid: true // needed to do rerender\n            });\n        } else {\n            console.log(\"set state\");\n            this.setState({\n                isFormValid: true,\n                isLoggedIn: true,\n                user: {\n                    name: nameText.value,\n                    email: emailText.value\n                }\n            }, () => {\n                this.props.dataService.setNewData(this.state.user); // set user\n                localStorage.setItem(\"user\", JSON.stringify(this.state.user));\n                localStorage.setItem(\"isLoggedIn\", JSON.stringify(true));\n            });\n        }\n    }\n\n    handleShow() {\n        if (!this.state.isLoggedIn) {\n            this.setState({showModal: true}, () => {\n                ReactDOM.findDOMNode(this.formName).focus();\n            });\n        } else {\n            this.setState({\n                isLoggedIn: false,\n                user: {\n                    name: \"unknown\",\n                    email: \"unknown\"\n                }\n            }, () => {\n                this.props.dataService.setNewData(this.state.user);\n                localStorage.setItem(\"user\", JSON.stringify(this.state.user));\n                localStorage.setItem(\"isLoggedIn\", JSON.stringify(false));\n            })\n        }\n    }\n\n    render() {\n\n        const {isFormValid, showModal, isLoggedIn} = this.state;\n\n        return (\n            <>\n                <Button variant=\"info\" onClick={this.handleShow}>\n                    {isLoggedIn ? 'Logout' : 'Login'}\n                </Button>\n\n                <Modal show={showModal} onHide={this.handleCancel}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>What's your name?</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form\n                            noValidate\n                            validated={isFormValid}\n                            onSubmit={e => this.handleSubmit(e)}\n                        >\n                            <Form.Group controlId=\"formName\">\n                                <Form.Control\n                                    required\n                                    type=\"text\"\n                                    placeholder=\"Name\"\n                                    ref={(ref) => {\n                                        this.formName = ref\n                                    }}\n                                />\n                            </Form.Group>\n                            <Form.Group controlId=\"formEmail\">\n                                <Form.Control\n                                    required\n                                    type=\"email\"\n                                    placeholder=\"Email\"\n                                    ref={(ref) => {\n                                        this.formEmail = ref\n                                    }}\n                                />\n                            </Form.Group>\n                            <Button type=\"submit\">Save</Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </>\n        )\n    }\n}\n\nexport default ModalUserName;","import logo from \"./logo.png\";\nimport React from \"react\";\nimport './App.css';\nimport ModalUserName from \"./ModalUserName\";\n\nclass Header extends React.Component {\n\n    render() {\n        return (\n            <header>\n                <div className=\"logo\">\n                    <img src={logo} alt=\"logo\" height=\"120px\">\n                    </img>\n                    <h1>friends</h1>\n                </div>\n                <div className=\"hello_user\">\n                    <span>Hello {this.props.name}!</span>\n                    <br/>\n                    <ModalUserName dataService={this.props.dataService}/>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;","class DataService {\n    observers = [];\n\n    setNewData(newData) {\n        console.log(\"newData: \");\n        console.log(newData);\n        this.observers.forEach(observer =>\n            observer(newData)\n        )\n    }\n\n    addObserver(observerCallback) {\n        this.observers.push(observerCallback);\n    }\n}\n\nexport let UserDataService = new DataService();\n\nexport let CommentDataObserver = new DataService();","import React from 'react';\nimport {faThumbsUp} from \"@fortawesome/free-regular-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {UserDataService} from \"./DataService\";\nimport {Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\n\nconst STORAGE_NAME_PREFIX = `like_panel-`;\n\n//like_panel-1\n\nclass LikePanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: JSON.parse(localStorage.getItem(\"user\")) || {\n                name: \"unknown\",\n                email: \"unknown\"\n            },\n            likes: JSON.parse(localStorage.getItem(this.getStorageName())) || {\n                likesCounter: 0,\n                likesArr: [],\n                currentUserLike: false\n            }\n        };\n\n        UserDataService.addObserver(this.onUserNameDefined);\n\n        this.likeHandler = this.likeHandler.bind(this);\n        this.getStorageName = this.getStorageName.bind(this);\n\n    }\n\n    // Set newData about loggedIn user in LikePanel state from DataService\n    onUserNameDefined = (user) => {\n        this.setState({\n            user: user\n        });\n    };\n\n    getStorageName() {\n        return STORAGE_NAME_PREFIX + this.props.id;\n    }\n\n    likeHandler() {\n\n        let storageCallback = () => {\n            localStorage.setItem(this.getStorageName(), JSON.stringify(this.state.likes));\n        };\n\n        let userEmail = this.state.user.email;\n        let likesArr = this.state.likes.likesArr;\n\n        if (userEmail !== \"unknown\") {\n            if (!likesArr.includes(userEmail)) {\n                likesArr.push(userEmail);\n                this.setState(prevState => ({\n                    likes: Object.assign(prevState.likes, {likesArr: likesArr, likesCounter: likesArr.length})\n                }), storageCallback)\n            } else {\n                let checkEmailIndex = (element) => {\n                    return element === userEmail\n                };\n                let emailIndex = likesArr.findIndex(checkEmailIndex);\n                likesArr.splice(emailIndex, 1);\n                this.setState(prevState => ({\n                    likes: Object.assign(prevState.likes, {likesArr: likesArr, likesCounter: likesArr.length})\n                }), storageCallback)\n            }\n        }\n    }\n\n    render() {\n\n        let likeButton = null;\n\n        if (this.state.user.email === \"unknown\") {\n            likeButton = (\n                <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Please login</Tooltip>}>\n                    <span className=\"\">\n                    <Button\n                        disabled\n                        style={{pointerEvents: 'none'}}\n                        className=\"comment_button btn-left\"\n                    >\n                        <FontAwesomeIcon icon={faThumbsUp}/>\n                        <span>{this.state.likes.likesCounter}</span>\n                    </Button>\n                    </span>\n                </OverlayTrigger>\n            )\n        } else {\n            likeButton = (\n                <button\n                    className=\"comment_button btn-left\"\n                    name=\"like\"\n                    value={this.state.likes.likesCounter}\n                    onClick={this.likeHandler}\n                >\n                    <FontAwesomeIcon icon={faThumbsUp}/>\n                    <span>{this.state.likes.likesCounter}</span>\n                </button>\n            )\n        }\n\n        return (\n            <div>\n                {likeButton}\n            </div>\n        )\n    }\n}\n\nexport default LikePanel;","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons/faEllipsisH\";\nimport {UserDataService} from \"./DataService\";\n\nclass CommentAdded extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editing: false,\n            textareaValue: this.props.textValue,\n            commentsArr: this.props.commentsArr,\n            user: {\n                name: this.props.name,\n                email: this.props.email\n            }\n        };\n\n        this.renderNormal = this.renderNormal.bind(this);\n        this.renderTxtArea = this.renderTxtArea.bind(this);\n        this.editComment = this.editComment.bind(this);\n        this.applyComment = this.applyComment.bind(this);\n        this.textareaHandle = this.textareaHandle.bind(this);\n\n        UserDataService.addObserver(this.onUserNameDefined)\n\n    }\n\n    // Set newData about loggedIn user in CommentAdded from DataService\n    onUserNameDefined = (user) => {\n        this.setState({\n            user: user\n        });\n    };\n\n    textareaHandle(e) {\n        this.setState({\n            textareaValue: e.target.value\n        });\n    };\n\n    // editing statuses\n    editComment() {\n        this.setState({\n            editing: true\n        })\n    };\n\n    applyComment(e) {\n        let commentsArr = this.state.commentsArr;\n        let commentIndex = commentsArr.map(comment => (comment.id)).indexOf(this.props.id);\n        let newText = this.state.textareaValue;\n\n        if (e.keyCode === 13 && e.shiftKey === false) {\n            let newCommentsObj = Object.assign(commentsArr[commentIndex], {textValue: newText}); // edit textValue in comment object\n            commentsArr[commentIndex] = newCommentsObj;\n\n            this.setState({\n                editing: false,\n                commentsArr: commentsArr\n            }, () => this.props.commentObserver.setNewData(this.state.commentsArr)) // set new commentsArr for CommentPanel\n        }\n    }\n\n    renderNormal() {\n        return (\n            <span> {this.state.textareaValue} </span>\n        )\n    }\n\n    renderTxtArea() {\n        return (\n            <span>\n                <textarea\n                    rows=\"1\"\n                    className=\"comment_edit\"\n                    onKeyDown={this.applyComment}\n                    value={this.state.textareaValue}\n                    onChange={this.textareaHandle}\n                />\n            </span>\n        )\n    }\n\n\n    render() {\n\n        const {name, email} = this.props;\n\n        // display editing dots on comments from user loggedIn\n        let dots;\n        if (this.state.user.email === email && this.state.user.email !== \"unknown\") {\n            dots = (\n                <FontAwesomeIcon className=\"dots\" icon={faEllipsisH} onClick={this.editComment}/>\n            )\n        }\n\n        // render status or textarea field to editing this comment\n        let edit;\n        if (this.state.editing) {\n            edit = this.renderTxtArea()\n        } else {\n            edit = this.renderNormal()\n        }\n\n        return (\n            <div className=\"comment_added\">\n                <p className=\"\">{name}: {edit} {dots} </p>\n            </div>\n        )\n    }\n}\n\nexport default CommentAdded;","import React from \"react\";\nimport LikePanel from \"./LikePanel\"\nimport CommentAdded from \"./CommentAdded\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCommentDots} from \"@fortawesome/free-regular-svg-icons\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {UserDataService, CommentDataObserver} from \"./DataService\";\nimport {faAngleDoubleDown, faAngleDoubleUp} from \"@fortawesome/free-solid-svg-icons\";\n\nconst STORAGE_NAME_PREFIX = `comment_panel-`;\n\n//comment_panel-1\n\nclass CommentPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = JSON.parse(localStorage.getItem(this.getStorageName())) || {\n            commentsArr: [],\n            commentsCounter: 0,\n            displayComments: false,\n            textareaValue: \"\",\n        };\n\n        this.displayComments = this.displayComments.bind(this);\n        this.addNewComment = this.addNewComment.bind(this);\n        this.getStorageName = this.getStorageName.bind(this);\n        this.textareaHandle = this.textareaHandle.bind(this);\n        this.storageCallback = this.storageCallback.bind(this);\n\n        UserDataService.addObserver(this.onUserNameDefined);\n        CommentDataObserver.addObserver(this.onCommentEdition)\n\n    }\n\n    getStorageName() {\n        return STORAGE_NAME_PREFIX + this.props.id;\n    }\n\n    storageCallback = () => localStorage.setItem(this.getStorageName(), JSON.stringify(this.state));\n\n    // callback when some comment from commentsArr is edited\n    onCommentEdition = (commentsArr) => {\n        this.setState({\n            commentsArr: commentsArr\n        }, this.storageCallback)\n    };\n\n    // hide comments if the user logs out\n    onUserNameDefined = (user) => {\n        if (user.name === \"unknown\") {\n            this.setState({\n                displayComments: false\n            })\n        }\n    };\n\n    displayComments() {\n        if (this.state.displayComments) {\n            this.setState(prevState => ({\n                displayComments: !prevState.displayComments\n            }), this.storageCallback)\n        } else {\n            this.setState(prevState => ({\n                displayComments: !prevState.displayComments\n            }), this.storageCallback)\n        }\n    }\n\n    textareaHandle(e) {\n        this.setState({\n            textareaValue: e.target.value\n        });\n    };\n\n    addNewComment = (e) => {\n        let userData = {\n            id: this.state.commentsArr.length + 1,\n            name: this.props.name,\n            email: this.props.email,\n            textValue: this.state.textareaValue\n        };\n\n\n        if (userData.textValue.trim().length > 0) {\n            if (e.keyCode === 13 && e.shiftKey === false) {\n                e.preventDefault(); // delete enter in textarea after send a new comment\n                this.setState(prevState => ({\n                    commentsArr: [userData, ...prevState.commentsArr], // push new comment to begin of array\n                    textareaValue: \"\",\n                    commentsCounter: this.state.commentsArr.length + 1\n                }), this.storageCallback)\n            }\n        }\n\n    };\n\n    render() {\n\n        const {id} = this.props;\n\n        // arrows up and down to display or not comments list\n        let faAngleIcon = null;\n        if (this.state.displayComments) {\n            faAngleIcon = faAngleDoubleUp\n        } else {\n            faAngleIcon = faAngleDoubleDown\n        }\n\n        // display or not comments list\n        let comment = null;\n        if (this.state.displayComments) {\n            comment = (\n                <div>\n                    <textarea\n                        rows=\"1\"\n                        cols=\"30\"\n                        className=\"comment_create\"\n                        placeholder=\"Write a comment...\"\n                        onKeyDown={this.addNewComment}\n                        value={this.state.textareaValue}\n                        onChange={this.textareaHandle}\n                    />\n                    <div className=\"comment_list\">\n                        {this.state.commentsArr.map(userData => {\n                            return <CommentAdded\n                                key={userData.id}\n                                id={userData.id}\n                                name={userData.name}\n                                email={userData.email}\n                                textValue={userData.textValue}\n                                commentsArr={this.state.commentsArr}\n                                commentObserver={CommentDataObserver}\n                            />\n                        })}\n                    </div>\n                </div>\n            )\n\n        }\n\n\n        return (\n            <Container className=\"comment-container\">\n                <Row>\n                    <Col>\n                        <LikePanel id={id}/>\n                    </Col>\n                    <Col>\n                        <button className=\"comment_button btn-right\"\n                                name=\"comment\"\n                                value={this.state.commentsCounter}\n                                onClick={this.displayComments}\n                        >\n                            <FontAwesomeIcon icon={faCommentDots}/>\n                            <span>{this.state.commentsCounter}</span>\n                            <FontAwesomeIcon icon={faAngleIcon}/>\n                        </button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {comment}\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default CommentPanel;","import React from \"react\";\nimport CommentPanel from \"./CommentPanel\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUser, faUserSecret} from \"@fortawesome/free-solid-svg-icons\";\nimport {UserDataService} from \"./DataService\";\nimport Moment from \"react-moment\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons/faEllipsisH\";\n\nclass StatusAdded extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editing: false,\n            textareaValue: this.props.txtValue,\n            user: JSON.parse(localStorage.getItem(\"user\")) || {\n                name: \"unknown\",\n                email: \"unknown\"\n            },\n            statusArr: JSON.parse(localStorage.getItem(\"statuses\"))\n        };\n\n        this.editStatus = this.editStatus.bind(this);\n        this.applyStatus = this.applyStatus.bind(this);\n        this.renderTxtArea = this.renderTxtArea.bind(this);\n        this.renderNormal = this.renderNormal.bind(this);\n        this.textareaHandle = this.textareaHandle.bind(this);\n\n        UserDataService.addObserver(this.onUserNameDefined)\n\n    }\n\n    textareaHandle(e) {\n        this.setState({\n            textareaValue: e.target.value\n        });\n    };\n\n    // Set newData about loggedIn user in StatusAdded from DataService\n    onUserNameDefined = (user) => {\n        this.setState({\n            user: user\n        });\n    };\n\n    // editing statuses\n    editStatus() {\n        this.setState({\n            editing: true\n        })\n    };\n\n    applyStatus(e) {\n        let statusArr = this.state.statusArr;\n        let statusIndex = statusArr.map(status => (status.id)).indexOf(this.props.id);\n        let newText = this.state.textareaValue;\n\n        if (e.keyCode === 13 && e.shiftKey === false) {\n            let newStatusObj = Object.assign(statusArr[statusIndex], {txtValue: newText});\n            statusArr[statusIndex] = newStatusObj;\n\n            this.setState({\n                editing: false,\n                statusArr: statusArr\n            }, () => {\n                localStorage.setItem(\"statuses\", JSON.stringify(this.state.statusArr));\n            })\n        }\n    }\n\n    renderTxtArea() {\n        return (\n            <div>\n                <textarea\n                    className=\"comment_create\"\n                    onKeyDown={this.applyStatus}\n                    value={this.state.textareaValue}\n                    onChange={this.textareaHandle}\n                />\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div>\n                <div className=\"status_content\">{this.state.textareaValue}</div>\n            </div>\n        )\n    }\n\n    render() {\n\n        const {date, name, email, id, color} = this.props;\n\n        // change user icon when unknown\n        let login;\n\n        if (name !== \"unknown\") {\n            login = faUser\n        } else {\n            login = faUserSecret\n        }\n\n        // display editing dots on statuses from user loggedIn\n        let dots;\n        if (email === this.state.user.email && this.state.user.email !== \"unknown\") {\n            dots = (\n                <FontAwesomeIcon className=\"dots\" icon={faEllipsisH} onClick={this.editStatus}/>\n            )\n        }\n\n        // render status or textarea field to editing this status\n        let edit;\n        if (this.state.editing) {\n            edit = this.renderTxtArea()\n        } else {\n            edit = this.renderNormal()\n        }\n\n\n        return (\n            <div className=\"status_added\">\n                <div className=\"author\">\n                    <FontAwesomeIcon className=\"faUserIcon\" style={{color: color}} icon={login}/>\n                    <p className=\"author_name\">{name}</p>\n                    <small className=\"status_data\">\n                        <Moment fromNow>{date}</Moment>\n                    </small>\n                    {dots}\n                </div>\n                {edit}\n                <CommentPanel id={id} name={this.state.user.name} email={this.state.user.email}/>\n            </div>\n        )\n    }\n}\n\nexport default StatusAdded;","import React from \"react\";\nimport StatusAdded from \"./StatusAdded\";\n\nconst STORAGE_NAME = \"statuses\";\n\nclass StatusCreate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            statusArr: JSON.parse(localStorage.getItem(STORAGE_NAME)) || [{\n                id: 0,\n                txtValue: \"Hi, maybe some movie today's evening?\",\n                date: new Date(),\n                name: \"Ola\",\n                email: \"\",\n                color: this.chooseColor()\n            }],\n            letters: 0,\n            textareaValue: \"\" // for controlled textarea\n        };\n\n        this.sendStatus = this.sendStatus.bind(this);\n        this.textareaHandle = this.textareaHandle.bind(this);\n        this.chooseColor = this.chooseColor.bind(this);\n    }\n\n    textareaHandle(e) {\n        this.setState({\n            letters: e.target.value.length,\n            textareaValue: e.target.value\n        });\n    };\n\n    chooseColor = () => {\n        let colorArr = [\"#E84291\", \"#F7AC13\", \"#2192A6\", \"#191E44\", \"#123E92\"];\n        return colorArr[Math.floor(Math.random() * colorArr.length)];\n    };\n\n    sendStatus = () => {\n\n        let storageCallback = () => {\n            localStorage.setItem(STORAGE_NAME, JSON.stringify(this.state.statusArr))\n        };\n\n        let statusData = {\n            id: this.state.statusArr.length,\n            txtValue: this.state.textareaValue,\n            date: new Date(),\n            name: this.props.name,\n            email: this.props.email,\n            color: this.chooseColor()\n        };\n\n        if (statusData.txtValue.trim().length > 0) {\n            this.setState(prevState => ({\n                statusArr: [statusData, ...prevState.statusArr],\n                letters: 0,\n                textareaValue: \"\"\n            }), storageCallback);\n        } else {\n            this.setState({\n                textareaValue: \"\"\n            })\n        }\n    };\n\n    render() {\n\n        const {maxLetters} = this.props;\n\n        return (\n            <div>\n                <div id=\"status_create\">\n                    <p>What do you want to share?</p>\n                    <textarea rows=\"2\" cols=\"70\"\n                              placeholder=\"Write something...\"\n                              onChange={this.textareaHandle}\n                              name=\"message\"\n                              maxLength={maxLetters}\n                              value={this.state.textareaValue}\n                    >\n                </textarea>\n                    <small>{this.props.maxLetters - this.state.letters} characters</small>\n                    <button id=\"send\" onClick={this.sendStatus}>Send</button>\n                </div>\n                <br/>\n                <div id=\"status_container\">\n                    {\n                        this.state.statusArr.map(statusData => {\n                            return <StatusAdded key={statusData.id}\n                                                id={statusData.id}\n                                                txtValue={statusData.txtValue}\n                                                date={statusData.date}\n                                                name={statusData.name}\n                                                email={statusData.email}\n                                                color={statusData.color}\n                            />\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default StatusCreate;","import React from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport StatusCreate from \"./StatusCreate\";\nimport {UserDataService} from \"./DataService\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {\n                name: \"unknown\",\n                email: \"unknown\"\n            }\n        };\n\n        UserDataService.addObserver(this.onUserNameDefined)\n\n    }\n\n    // Set newData in this.state.user App.js from DataService\n    onUserNameDefined = (user) => {\n        this.setState({\n            user: user\n        });\n    };\n\n    render() {\n\n        return (\n            <div>\n                <div>\n                    <Header dataService={UserDataService} name={this.state.user.name}/>\n                    <div className=\"body-container\">\n                        <StatusCreate maxLetters={300} name={this.state.user.name} email={this.state.user.email}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute storageCallback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute storageCallback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8a5da5cb.png\";"],"sourceRoot":""}