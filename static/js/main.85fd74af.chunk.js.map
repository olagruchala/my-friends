{"version":3,"sources":["DataService.js","ModalUserName.js","Header.js","LikePanel.js","CommentAdded.js","CommentPanel.js","StatusAdded.js","StatusCreate.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["DataService","observers","newData","console","log","this","forEach","observer","observerCallback","push","UserDataService","ModalUserName","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isFormValid","showModal","isLoggedIn","JSON","parse","localStorage","getItem","user","name","email","handleCancel","bind","assertThisInitialized","handleSubmit","handleShow","setNewData","setState","event","_this2","form","currentTarget","nameText","formName","emailText","formEmail","checkValidity","preventDefault","stopPropagation","value","setItem","stringify","_this3","ReactDOM","findDOMNode","focus","_this4","_this$state","react_default","a","createElement","Fragment","Button","variant","onClick","Modal","show","onHide","Header","closeButton","Title","Body","Form","noValidate","validated","onSubmit","e","Group","controlId","Control","required","type","placeholder","ref","React","Component","className","src","logo","alt","height","src_ModalUserName","LikePanel","onUserNameDefined","likes","getStorageName","likesArr","currentUserLike","addObserver","likeHandler","id","storageCallback","userEmail","includes","emailIndex","findIndex","element","splice","prevState","assign","likeButton","OverlayTrigger","overlay","Tooltip","disabled","style","pointerEvents","react_fontawesome_index_es","icon","faThumbsUp","length","CommentAdded","applyComment","newText","commentValue","keyCode","shiftKey","editing","commentDataObserver","updatedValue","textValue","renderNormal","renderTxtArea","editComment","textareaHandle","target","rows","onKeyDown","onChange","dots","edit","_this$props","faEllipsisH","CommentPanel","onCommentEdition","newComment","commentsArr","commentIndex","map","comment","indexOf","newCommentsObj","displayComments","textareaValue","addNewComment","trim","userData","concat","toConsumableArray","commentsCounter","faAngleIcon","faAngleDoubleUp","faAngleDoubleDown","commentList","cols","src_CommentAdded","key","storageName","Container","Row","Col","src_LikePanel","faCommentDots","StatusAdded","applyStatus","statusArr","statusIndex","status","txtValue","textarea","createRef","editStatus","renderTextarea","current","login","statusOrTextarea","date","color","faUser","faUserSecret","dist_default","fromNow","src_CommentPanel","STORAGE_NAME","StatusCreate","chooseColor","colorArr","Math","floor","random","Date","letters","storeStatus","statusData","maxLetters","maxLength","src_StatusAdded","App","src_Header","src_StatusCreate","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.85fd74af.chunk.js","sourcesContent":["class DataService {\n    observers = [];\n\n    setNewData(newData) {\n        console.log(\"newData: \");\n        console.log(newData);\n        this.observers.forEach(observer =>\n            observer(newData)\n        )\n    }\n\n    addObserver(observerCallback) {\n        this.observers.push(observerCallback);\n    }\n}\n\nexport let UserDataService = new DataService();\n\nexport default DataService;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Button, Modal, Form} from \"react-bootstrap\";\nimport {UserDataService} from \"./DataService\";\n\n\nclass ModalUserName extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFormValid: false,\n            showModal: false,\n            isLoggedIn: JSON.parse(localStorage.getItem(\"isLoggedIn\")) || false,\n\n            user: JSON.parse(localStorage.getItem(\"user\")) || {\n                name: \"unknown\",\n                email: \"unknown\"\n            }\n            // todo: isLoggedIn: (this.state.user.name !== \"unknown\")\n        };\n\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n\n    }\n\n    componentDidMount() {\n        if (this.state.user.name !== \"unknown\") {\n            UserDataService.setNewData(this.state.user); //set user\n        }\n    }\n\n    handleCancel() {\n        this.setState({\n            showModal: false\n        });\n    }\n\n    handleSubmit(event) {\n        const form = event.currentTarget;\n        const nameText = this.formName;\n        const emailText = this.formEmail;\n\n        if (form.checkValidity() === false) {\n            console.log(\"invalid form\");\n            event.preventDefault();\n            event.stopPropagation();\n            this.setState({\n                isFormValid: true // needed to do rerender\n            });\n        } else {\n            console.log(\"set state\");\n            this.setState({\n                isFormValid: true,\n                isLoggedIn: true,\n                user: {\n                    name: nameText.value,\n                    email: emailText.value\n                }\n            }, () => {\n                UserDataService.setNewData(this.state.user); // set user\n                localStorage.setItem(\"user\", JSON.stringify(this.state.user));\n                localStorage.setItem(\"isLoggedIn\", JSON.stringify(true));\n            });\n        }\n    }\n\n    handleShow() {\n        if (!this.state.isLoggedIn) {\n            this.setState({showModal: true}, () => {\n                ReactDOM.findDOMNode(this.formName).focus();\n            });\n        } else {\n            this.setState({\n                isLoggedIn: false,\n                user: {\n                    name: \"unknown\",\n                    email: \"unknown\"\n                }\n            }, () => {\n                UserDataService.setNewData(this.state.user);\n                localStorage.setItem(\"user\", JSON.stringify(this.state.user));\n                localStorage.setItem(\"isLoggedIn\", JSON.stringify(false));\n            })\n        }\n    }\n\n    render() {\n\n        const {isFormValid, showModal, isLoggedIn} = this.state;\n\n        return (\n            <>\n                <Button variant=\"info\" onClick={this.handleShow}>\n                    {isLoggedIn ? 'Logout' : 'Login'}\n                </Button>\n\n                <Modal show={showModal} onHide={this.handleCancel}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>What's your name?</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form\n                            noValidate\n                            validated={isFormValid}\n                            onSubmit={e => this.handleSubmit(e)}\n                        >\n                            <Form.Group controlId=\"formName\">\n                                <Form.Control\n                                    required\n                                    type=\"text\"\n                                    placeholder=\"Name\"\n                                    ref={(ref) => {\n                                        this.formName = ref\n                                    }}\n                                />\n                            </Form.Group>\n                            <Form.Group controlId=\"formEmail\">\n                                <Form.Control\n                                    required\n                                    type=\"email\"\n                                    placeholder=\"Email\"\n                                    ref={(ref) => {\n                                        this.formEmail = ref\n                                    }}\n                                />\n                            </Form.Group>\n                            <Button type=\"submit\">Save</Button>\n                        </Form>\n                    </Modal.Body>\n                </Modal>\n            </>\n        )\n    }\n}\n\nexport default ModalUserName;\n","import logo from \"./logo.png\";\nimport React from \"react\";\nimport './App.css';\nimport ModalUserName from \"./ModalUserName\";\n\nclass Header extends React.Component {\n\n    render() {\n        return (\n            <header>\n                <div className=\"logo\">\n                    <img src={logo} alt=\"logo\" height=\"120px\">\n                    </img>\n                    <h1>Friends</h1>\n                </div>\n                <div className=\"hello_user\">\n                    <span>Hello {this.props.name}!</span>\n                    <br/>\n                    <ModalUserName />\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport {faThumbsUp} from \"@fortawesome/free-regular-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {UserDataService} from \"./DataService\";\nimport {Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\n\nconst STORAGE_NAME_PREFIX = `like_panel-`;\n\n//like_panel-1\n\nclass LikePanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: JSON.parse(localStorage.getItem(\"user\")) || {\n                name: \"unknown\",\n                email: \"unknown\"\n            },\n            likes: JSON.parse(localStorage.getItem(this.getStorageName())) || {\n                likesArr: [],\n                currentUserLike: false\n            }\n        };\n\n        UserDataService.addObserver(this.onUserNameDefined);\n\n        this.likeHandler = this.likeHandler.bind(this);\n        this.getStorageName = this.getStorageName.bind(this);\n\n    }\n\n    // Set newData about loggedIn user in LikePanel state from DataService\n    onUserNameDefined = (user) => {\n        this.setState({\n            user: user\n        });\n    };\n\n    getStorageName() {\n        return STORAGE_NAME_PREFIX + this.props.id;\n    }\n\n    likeHandler() {\n\n        let storageCallback = () => {\n            localStorage.setItem(this.getStorageName(), JSON.stringify(this.state.likes));\n        };\n\n        let userEmail = this.state.user.email;\n        let likesArr = this.state.likes.likesArr;\n\n        if (userEmail !== \"unknown\") {\n            if (!likesArr.includes(userEmail)) {\n                likesArr.push(userEmail);\n                this.setState(prevState => ({\n                    likes: Object.assign(prevState.likes, {likesArr: likesArr})\n                }), storageCallback)\n            } else {\n                let checkEmailIndex = (element) => {\n                    return element === userEmail\n                };\n                let emailIndex = likesArr.findIndex(checkEmailIndex);\n                likesArr.splice(emailIndex, 1);\n                this.setState(prevState => ({\n                    likes: Object.assign(prevState.likes, {likesArr: likesArr})\n                }), storageCallback)\n            }\n        }\n    }\n\n    render() {\n\n        let likeButton = null;\n\n        if (this.state.user.email === \"unknown\") {\n            likeButton = (\n                <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Please login</Tooltip>}>\n                    <span className=\"\">\n                    <Button\n                        disabled\n                        style={{pointerEvents: 'none'}}\n                        className=\"comment_button btn-left\"\n                    >\n                        <FontAwesomeIcon icon={faThumbsUp}/>\n                        <span>{this.state.likes.likesArr.length}</span>\n                    </Button>\n                    </span>\n                </OverlayTrigger>\n            )\n        } else {\n            likeButton = (\n                <button\n                    className=\"comment_button btn-left\"\n                    name=\"like\"\n                    value={this.state.likes.likesArr.length}\n                    onClick={this.likeHandler}\n                >\n                    <FontAwesomeIcon icon={faThumbsUp}/>\n                    <span>{this.state.likes.likesArr.length}</span>\n                </button>\n            )\n        }\n\n        return (\n            <div>\n                {likeButton}\n            </div>\n        )\n    }\n}\n\nexport default LikePanel;\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons/faEllipsisH\";\nimport {UserDataService} from \"./DataService\";\n\nclass CommentAdded extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editing: false,\n            commentValue: this.props.textValue,\n            user: JSON.parse(localStorage.getItem(\"user\")) || {\n                name: \"unknown\",\n                email: \"unknown\"\n            }\n        };\n\n        this.renderNormal = this.renderNormal.bind(this);\n        this.renderTxtArea = this.renderTxtArea.bind(this);\n        this.editComment = this.editComment.bind(this);\n        this.applyComment = this.applyComment.bind(this);\n        this.textareaHandle = this.textareaHandle.bind(this);\n\n        UserDataService.addObserver(this.onUserNameDefined);\n    }\n\n    // Set newData about loggedIn user in CommentAdded from DataService\n    onUserNameDefined = (user) => {\n        this.setState({\n            user: user\n        } );\n    };\n\n    textareaHandle(e) {\n        this.setState({\n            commentValue: e.target.value\n        });\n    };\n\n    // editing comment -> show textarea\n    editComment() {\n        this.setState({\n            editing: true\n        })\n    };\n\n    applyComment = (e) => {\n        let newText = this.state.commentValue;\n        if (e.keyCode === 13 && e.shiftKey === false) {\n            this.setState({\n                editing: false,\n            }, () => {\n                this.props.commentDataObserver.setNewData({\n                    id: this.props.id,\n                    updatedValue: newText\n                });\n            }) // set new commentsArr for CommentPanel-id\n        }\n    };\n\n    renderNormal() {\n        return (\n            <span> {this.state.commentValue} </span>\n        )\n    }\n\n    renderTxtArea() {\n        return (\n            <span>\n                <textarea\n                    rows=\"1\"\n                    className=\"comment_edit\"\n                    onKeyDown={this.applyComment}\n                    value={this.state.commentValue}\n                    onChange={this.textareaHandle}\n                />\n            </span>\n        )\n    }\n\n\n    render() {\n\n        const {name, email} = this.props;\n\n        // display editing dots on comments from user loggedIn\n        let dots;\n        if (email !== \"unknown\" && this.state.user.email === email) {\n            dots = (\n                <FontAwesomeIcon className=\"dots\" icon={faEllipsisH} onClick={this.editComment}/>\n            )\n        }\n\n        // render status or textarea field to editing this comment\n        let edit;\n        if (this.state.editing) {\n            edit = this.renderTxtArea()\n        } else {\n            edit = this.renderNormal()\n        }\n\n        return (\n            <div className=\"comment_added\">\n                <p className=\"\">{name}: {edit} {dots} </p>\n            </div>\n        )\n    }\n}\n\nexport default CommentAdded;","import React from \"react\";\nimport LikePanel from \"./LikePanel\"\nimport CommentAdded from \"./CommentAdded\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCommentDots} from \"@fortawesome/free-regular-svg-icons\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport DataService, {UserDataService} from \"./DataService\"; //todo\nimport {faAngleDoubleDown, faAngleDoubleUp} from \"@fortawesome/free-solid-svg-icons\";\n\nconst STORAGE_NAME_PREFIX = `comment_panel-`;\n\nclass CommentPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = JSON.parse(localStorage.getItem(this.getStorageName())) || {\n            commentsArr: [],\n            commentsCounter: 0,\n            displayComments: false,\n            textareaValue: \"\",\n        };\n\n        this.displayComments = this.displayComments.bind(this);\n        this.addNewComment = this.addNewComment.bind(this);\n        this.getStorageName = this.getStorageName.bind(this);\n        this.textareaHandle = this.textareaHandle.bind(this);\n        this.storageCallback = this.storageCallback.bind(this);\n\n        UserDataService.addObserver(this.onUserNameDefined);\n\n        this.commentDataObserver = new DataService();\n        this.commentDataObserver.addObserver(this.onCommentEdition);\n    }\n\n    getStorageName() {\n        return STORAGE_NAME_PREFIX + this.props.id;\n    }\n\n    storageCallback = () => localStorage.setItem(this.getStorageName(), JSON.stringify(this.state));\n\n    // callback when some comment from commentsArr is edited\n    onCommentEdition = (newComment) => {\n        let commentsArr = this.state.commentsArr;\n        let commentIndex = commentsArr.map(comment => (comment.id)).indexOf(newComment.id);\n        let newCommentsObj = Object.assign(commentsArr[commentIndex], {textValue: newComment.updatedValue});\n        commentsArr[commentIndex] = newCommentsObj;\n\n        this.setState({\n            commentsArr: commentsArr\n        }, this.storageCallback)\n    };\n\n    // hide comments if the user logs out\n    onUserNameDefined = (user) => {\n        if (user.name === \"unknown\") {\n            this.setState({\n                displayComments: false\n            }, this.storageCallback)\n        }\n    };\n\n    displayComments() {\n        this.setState(prevState => ({\n            displayComments: !prevState.displayComments\n        }), this.storageCallback)\n    }\n\n    textareaHandle = (e) => {\n        this.setState({\n            textareaValue: e.target.value\n        });\n    };\n\n    addNewComment = (e) => {\n        if (e.keyCode === 13 && e.shiftKey === false) {\n            e.preventDefault(); //stops propagation of Enter key down the DOM tree\n\n            if (this.state.textareaValue.trim().length > 0) {\n                let userData = {\n                    id: this.state.commentsArr.length + 1,\n                    name: this.props.name,\n                    email: this.props.email,\n                    textValue: this.state.textareaValue\n                };\n\n                this.setState(prevState => ({\n                    commentsArr: [userData, ...prevState.commentsArr], // push new comment to begin of array\n                    textareaValue: \"\",\n                    commentsCounter: this.state.commentsArr.length + 1\n                }), this.storageCallback)\n            }\n        }\n\n    };\n\n    render() {\n\n        const {id} = this.props;\n\n        // arrows up and down to display or not comments list\n        let faAngleIcon = null;\n        if (this.state.displayComments) {\n            faAngleIcon = faAngleDoubleUp\n        } else {\n            faAngleIcon = faAngleDoubleDown\n        }\n\n        // display or not comments list\n        let commentList = null;\n        if (this.state.displayComments) {\n            commentList = (\n                <div>\n                    <textarea\n                        rows=\"1\"\n                        cols=\"30\"\n                        className=\"comment_create\"\n                        placeholder=\"Write a comment...\"\n                        onKeyDown={this.addNewComment}\n                        value={this.state.textareaValue}\n                        onChange={this.textareaHandle}\n                    />\n                    <div className=\"comment_list\">\n                        {\n                            this.state.commentsArr.map(userData => {\n                                return <CommentAdded\n                                    key={userData.id}\n                                    id={userData.id}\n                                    name={userData.name}\n                                    email={userData.email}\n                                    textValue={userData.textValue}\n                                    commentDataObserver={this.commentDataObserver}\n                                    storageName={this.getStorageName()}\n                                />\n                            })\n                        }\n                    </div>\n                </div>\n            )\n        }\n\n\n        return (\n            <Container className=\"comment-container\">\n                <Row>\n                    <Col>\n                        <LikePanel id={id}/>\n                    </Col>\n                    <Col>\n                        <button className=\"comment_button btn-right\"\n                                name=\"comment\"\n                                value={this.state.commentsCounter}\n                                onClick={this.displayComments}\n                        >\n                            <FontAwesomeIcon icon={faCommentDots}/>\n                            <span>{this.state.commentsCounter}</span>\n                            <FontAwesomeIcon icon={faAngleIcon}/>\n                        </button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {commentList}\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default CommentPanel;","import React from \"react\";\nimport CommentPanel from \"./CommentPanel\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faUser, faUserSecret} from \"@fortawesome/free-solid-svg-icons\";\nimport {UserDataService} from \"./DataService\";\nimport Moment from \"react-moment\";\nimport {faEllipsisH} from \"@fortawesome/free-solid-svg-icons/faEllipsisH\";\n\nclass StatusAdded extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editing: false,\n            textareaValue: this.props.txtValue,\n            user: JSON.parse(localStorage.getItem(\"user\")) || {\n                name: \"unknown\",\n                email: \"unknown\"\n            },\n            statusArr: JSON.parse(localStorage.getItem(\"statuses\"))\n        };\n        this.textarea = React.createRef();\n\n        this.editStatus = this.editStatus.bind(this);\n        this.applyStatus = this.applyStatus.bind(this);\n        this.renderTextarea = this.renderTextarea.bind(this);\n        this.renderNormal = this.renderNormal.bind(this);\n        this.textareaHandle = this.textareaHandle.bind(this);\n\n        UserDataService.addObserver(this.onUserNameDefined)\n\n    }\n\n    textareaHandle(e) {\n        this.setState({\n            textareaValue: e.target.value\n        });\n    };\n\n    // Set newData about loggedIn user in StatusAdded from DataService\n    onUserNameDefined = (user) => {\n        this.setState({\n            user: user\n        });\n    };\n\n    // editing statuses -> show textarea\n    editStatus() {\n        this.setState({\n            editing: true\n        }, () => {\n            this.textarea.current.focus();\n        })\n    };\n\n    applyStatus = (e) => {\n        if (e.keyCode === 13 && e.shiftKey === false) {\n            let statusArr = this.state.statusArr;\n            let statusIndex = statusArr.map(status => (status.id)).indexOf(this.props.id);\n            let newText = this.state.textareaValue;\n\n            statusArr[statusIndex] = Object.assign(statusArr[statusIndex], {txtValue: newText});\n\n            this.setState({\n                editing: false,\n                statusArr: statusArr\n            }, () => {\n                localStorage.setItem(\"statuses\", JSON.stringify(this.state.statusArr));\n            })\n        }\n    };\n\n    renderTextarea() {\n        return (\n            <div>\n                <textarea\n                    className=\"comment_create\"\n                    onKeyDown={this.applyStatus}\n                    value={this.state.textareaValue}\n                    onChange={this.textareaHandle}\n                    ref={this.textarea}\n                />\n            </div>\n        )\n    }\n\n    renderNormal() {\n        return (\n            <div>\n                <div className=\"status_content\">{this.state.textareaValue}</div>\n            </div>\n        )\n    }\n\n    render() {\n\n        const {date, name, email, id, color} = this.props;\n\n        // change user icon when unknown\n        let login;\n\n        if (name !== \"unknown\") {\n            login = faUser\n        } else {\n            login = faUserSecret\n        }\n\n        // display editing dots on statuses from user loggedIn\n        let dots;\n        if (email === this.state.user.email && this.state.user.email !== \"unknown\") {\n            dots = (\n                <FontAwesomeIcon className=\"dots\" icon={faEllipsisH} onClick={this.editStatus}/>\n            )\n        }\n\n        // render status or textarea field to editing this status\n        let statusOrTextarea;\n        if (this.state.editing) {\n            statusOrTextarea = this.renderTextarea()\n        } else {\n            statusOrTextarea = this.renderNormal()\n        }\n\n\n        return (\n            <div className=\"status_added\">\n                <div className=\"author\">\n                    <FontAwesomeIcon className=\"faUserIcon\" style={{color: color}} icon={login}/>\n                    <p className=\"author_name\">{name}</p>\n                    <small className=\"status_data\">\n                        <Moment fromNow>{date}</Moment>\n                    </small>\n                    {dots}\n                </div>\n                {statusOrTextarea}\n                <CommentPanel\n                    id={id}\n                    name={this.state.user.name}\n                    email={this.state.user.email}\n                />\n            </div>\n        )\n    }\n}\n\nexport default StatusAdded;","import React from \"react\";\nimport StatusAdded from \"./StatusAdded\";\n\nconst STORAGE_NAME = \"statuses\";\n\nclass StatusCreate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            statusArr: JSON.parse(localStorage.getItem(STORAGE_NAME)) || [{\n                id: 0,\n                txtValue: \"Hi, maybe some movie today's evening?\",\n                date: new Date(),\n                name: \"Ola\",\n                email: \"\",\n                color: this.chooseColor()\n            }],\n            letters: 0,\n            textareaValue: \"\" // for controlled textarea\n        };\n\n        this.storeStatus = this.storeStatus.bind(this);\n        this.textareaHandle = this.textareaHandle.bind(this);\n        this.chooseColor = this.chooseColor.bind(this);\n    }\n\n    textareaHandle(e) {\n        this.setState({\n            letters: e.target.value.length,\n            textareaValue: e.target.value\n        });\n    };\n\n    chooseColor = () => {\n        let colorArr = [\"#E84291\", \"#F7AC13\", \"#2192A6\", \"#191E44\", \"#123E92\"];\n        return colorArr[Math.floor(Math.random() * colorArr.length)];\n    };\n\n    storeStatus() {\n\n        let storageCallback = () => {\n            localStorage.setItem(STORAGE_NAME, JSON.stringify(this.state.statusArr))\n        };\n\n        let statusData = {\n            id: this.state.statusArr.length,\n            txtValue: this.state.textareaValue,\n            date: new Date(),\n            name: this.props.name,\n            email: this.props.email,\n            color: this.chooseColor()\n        };\n\n        if (statusData.txtValue.trim().length > 0) {\n            this.setState(prevState => ({\n                statusArr: [statusData, ...prevState.statusArr],\n                letters: 0,\n                textareaValue: \"\"\n            }), storageCallback);\n        }\n\n        console.log(localStorage.getItem('statuses'));\n    };\n\n    render() {\n\n        const {maxLetters} = this.props;\n\n        return (\n            <div>\n                <div id=\"status_create\">\n                    <p>What do you want to share?</p>\n                    <textarea rows=\"2\" cols=\"70\"\n                              placeholder=\"Write something...\"\n                              onChange={this.textareaHandle}\n                              name=\"message\"\n                              maxLength={maxLetters}\n                              value={this.state.textareaValue}\n                    >\n                </textarea>\n                    <small>{this.props.maxLetters - this.state.letters} characters</small>\n                    <button id=\"send\" onClick={this.storeStatus}>Send</button>\n                </div>\n                <br/>\n                <div id=\"status_container\">\n                    {\n                        this.state.statusArr.map(statusData => {\n                            return <StatusAdded key={statusData.id}\n                                                id={statusData.id}\n                                                txtValue={statusData.txtValue}\n                                                date={statusData.date}\n                                                name={statusData.name}\n                                                email={statusData.email}\n                                                color={statusData.color}\n                            />\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default StatusCreate;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport StatusCreate from \"./StatusCreate\";\nimport {UserDataService} from \"./DataService\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {\n                name: \"unknown\",\n                email: \"unknown\"\n            }\n        };\n\n        UserDataService.addObserver(this.onUserNameDefined)\n\n    }\n\n    // Set newData in this.state.user App.js from DataService\n    onUserNameDefined = (user) => {\n        this.setState({\n            user: user\n        });\n    };\n\n    render() {\n\n        return (\n            <div>\n                <div>\n                    <Header name={this.state.user.name}/>\n                    <div className=\"body-container\">\n                        <StatusCreate maxLetters={300} name={this.state.user.name} email={this.state.user.email}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute storageCallback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute storageCallback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8a5da5cb.png\";"],"sourceRoot":""}